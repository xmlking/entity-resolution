// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file er/service/entity/v1/entity_service.proto (package er.service.entity.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

// provides api to create, read, update and delete policies.

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import {Status} from "../../../schema/entity/v1/entity_pb.js";

/**
 * @generated from message er.service.entity.v1.Response
 */
export class Response extends Message<Response> {
  /**
   * @generated from field: optional string key = 1;
   */
  key?: string;

  /**
   * @generated from field: er.schema.entity.v1.Status status = 2;
   */
  status = Status.UNSPECIFIED;

  constructor(data?: PartialMessage<Response>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "er.service.entity.v1.Response";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(Status) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Response {
    return new Response().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Response {
    return new Response().fromJsonString(jsonString, options);
  }

  static equals(a: Response | PlainMessage<Response> | undefined, b: Response | PlainMessage<Response> | undefined): boolean {
    return proto3.util.equals(Response, a, b);
  }
}


/* eslint-disable */
// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,ts_nocheck,eslint_disable,// @generated from protobuf file "er/service/entity/v1/entity_service.proto" (package "er.service.entity.v1", syntax proto3),// tslint:disable
// @ts-nocheck
import { Member } from "../../../schema/entity/v1/entity";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Status } from "../../../schema/entity/v1/entity";
/**
 * @generated from protobuf message er.service.entity.v1.Response
 */
export interface Response {
    /**
     * @generated from protobuf field: optional string key = 1;
     */
    key?: string;
    /**
     * @generated from protobuf field: er.schema.entity.v1.Status status = 2;
     */
    status: Status;
}
// @generated message type with reflection information, may provide speed optimized methods
class Response$Type extends MessageType<Response> {
    constructor() {
        super("er.service.entity.v1.Response", [
            { no: 1, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["er.schema.entity.v1.Status", Status, "STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<Response>): Response {
        const message = { status: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Response>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string key */ 1:
                    message.key = reader.string();
                    break;
                case /* er.schema.entity.v1.Status status */ 2:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string key = 1; */
        if (message.key !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* er.schema.entity.v1.Status status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message er.service.entity.v1.Response
 */
export const Response = new Response$Type();
/**
 * @generated ServiceType for protobuf service er.service.entity.v1.EntityService
 */
export const EntityService = new ServiceType("er.service.entity.v1.EntityService", [
    { name: "Ingest", options: {}, I: Member, O: Response },
    { name: "Inquiry", options: {}, I: Member, O: Response }
]);

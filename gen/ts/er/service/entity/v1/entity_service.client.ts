/* eslint-disable */
// @generated by protobuf-ts 2.4.0 with parameter generate_dependencies,ts_nocheck,eslint_disable,// @generated from protobuf file "er/service/entity/v1/entity_service.proto" (package "er.service.entity.v1", syntax proto3),// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EntityService } from "./entity_service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Response } from "./entity_service";
import type { Member } from "../../../schema/entity/v1/entity";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * EntityService API
 *
 * @generated from protobuf service er.service.entity.v1.EntityService
 */
export interface IEntityServiceClient {
    /**
     * @generated from protobuf rpc: Ingest(er.schema.entity.v1.Member) returns (er.service.entity.v1.Response);
     */
    ingest(input: Member, options?: RpcOptions): UnaryCall<Member, Response>;
    /**
     * rpc IngestStream(stream er.schema.entity.v1.Member) returns (stream Response) {}
     *
     * rpc InquiryStream(stream er.schema.entity.v1.Member) returns (stream Response) {}
     *
     * @generated from protobuf rpc: Inquiry(er.schema.entity.v1.Member) returns (er.service.entity.v1.Response);
     */
    inquiry(input: Member, options?: RpcOptions): UnaryCall<Member, Response>;
}
/**
 * EntityService API
 *
 * @generated from protobuf service er.service.entity.v1.EntityService
 */
export class EntityServiceClient implements IEntityServiceClient, ServiceInfo {
    typeName = EntityService.typeName;
    methods = EntityService.methods;
    options = EntityService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Ingest(er.schema.entity.v1.Member) returns (er.service.entity.v1.Response);
     */
    ingest(input: Member, options?: RpcOptions): UnaryCall<Member, Response> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Member, Response>("unary", this._transport, method, opt, input);
    }
    /**
     * rpc IngestStream(stream er.schema.entity.v1.Member) returns (stream Response) {}
     *
     * rpc InquiryStream(stream er.schema.entity.v1.Member) returns (stream Response) {}
     *
     * @generated from protobuf rpc: Inquiry(er.schema.entity.v1.Member) returns (er.service.entity.v1.Response);
     */
    inquiry(input: Member, options?: RpcOptions): UnaryCall<Member, Response> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Member, Response>("unary", this._transport, method, opt, input);
    }
}

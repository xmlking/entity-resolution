// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: er/schema/entity/v1/entity.proto

package entityv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _entity_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Address) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Address with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AddressMultiError, or nil if none found.
func (m *Address) ValidateAll() error {
	return m.validate(true)
}

func (m *Address) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Suite

	// no validation rules for Street

	if !_Address_City_Pattern.MatchString(m.GetCity()) {
		err := AddressValidationError{
			field:  "City",
			reason: "value does not match regex pattern \"(?i)^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Address_State_Pattern.MatchString(m.GetState()) {
		err := AddressValidationError{
			field:  "State",
			reason: "value does not match regex pattern \"(?i)^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Code

	if !_Address_Country_Pattern.MatchString(m.GetCountry()) {
		err := AddressValidationError{
			field:  "Country",
			reason: "value does not match regex pattern \"(?i)^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Location != nil {

		if all {
			switch v := interface{}(m.GetLocation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddressValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddressValidationError{
						field:  "Location",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddressValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddressMultiError(errors)
	}

	return nil
}

// AddressMultiError is an error wrapping multiple validation errors returned
// by Address.ValidateAll() if the designated constraints aren't met.
type AddressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddressMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddressMultiError) AllErrors() []error { return m }

// AddressValidationError is the validation error returned by Address.Validate
// if the designated constraints aren't met.
type AddressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddressValidationError) ErrorName() string { return "AddressValidationError" }

// Error satisfies the builtin error interface
func (e AddressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddressValidationError{}

var _Address_City_Pattern = regexp.MustCompile("(?i)^[a-zA-Z]+$")

var _Address_State_Pattern = regexp.MustCompile("(?i)^[a-zA-Z]+$")

var _Address_Country_Pattern = regexp.MustCompile("(?i)^[a-zA-Z]+$")

// Validate checks the field values on Name with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Name) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Name with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in NameMultiError, or nil if none found.
func (m *Name) ValidateAll() error {
	return m.validate(true)
}

func (m *Name) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetFirst()) < 3 {
		err := NameValidationError{
			field:  "First",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetFirst()) > 256 {
		err := NameValidationError{
			field:  "First",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Name_First_Pattern.MatchString(m.GetFirst()) {
		err := NameValidationError{
			field:  "First",
			reason: "value does not match regex pattern \"(?i)^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLast()) < 2 {
		err := NameValidationError{
			field:  "Last",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetLast()) > 256 {
		err := NameValidationError{
			field:  "Last",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Name_Last_Pattern.MatchString(m.GetLast()) {
		err := NameValidationError{
			field:  "Last",
			reason: "value does not match regex pattern \"(?i)^[a-zA-Z]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Middle != nil {
		// no validation rules for Middle
	}

	if m.Title != nil {
		// no validation rules for Title
	}

	if len(errors) > 0 {
		return NameMultiError(errors)
	}

	return nil
}

// NameMultiError is an error wrapping multiple validation errors returned by
// Name.ValidateAll() if the designated constraints aren't met.
type NameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameMultiError) AllErrors() []error { return m }

// NameValidationError is the validation error returned by Name.Validate if the
// designated constraints aren't met.
type NameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameValidationError) ErrorName() string { return "NameValidationError" }

// Error satisfies the builtin error interface
func (e NameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sName.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameValidationError{}

var _Name_First_Pattern = regexp.MustCompile("(?i)^[a-zA-Z]+$")

var _Name_Last_Pattern = regexp.MustCompile("(?i)^[a-zA-Z]+$")

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetExternalId()); err != nil {
		err = MemberValidationError{
			field:  "ExternalId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNames()) < 1 {
		err := MemberValidationError{
			field:  "Names",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Names[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberValidationError{
					field:  fmt.Sprintf("Names[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetDob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "Dob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "Dob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Gender_name[int32(m.GetGender())]; !ok {
		err := MemberValidationError{
			field:  "Gender",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetEmails()) > 5 {
		err := MemberValidationError{
			field:  "Emails",
			reason: "value must contain no more than 5 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetEmails()))
		i := 0
		for key := range m.GetEmails() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetEmails()[key]
			_ = val

			if utf8.RuneCountInString(key) < 4 {
				err := MemberValidationError{
					field:  fmt.Sprintf("Emails[%v]", key),
					reason: "value length must be at least 4 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if err := m._validateEmail(val); err != nil {
				err = MemberValidationError{
					field:  fmt.Sprintf("Emails[%v]", key),
					reason: "value must be a valid email address",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(m.GetPhones()) > 5 {
		err := MemberValidationError{
			field:  "Phones",
			reason: "value must contain no more than 5 pair(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetPhones()))
		i := 0
		for key := range m.GetPhones() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetPhones()[key]
			_ = val

			if utf8.RuneCountInString(key) < 4 {
				err := MemberValidationError{
					field:  fmt.Sprintf("Phones[%v]", key),
					reason: "value length must be at least 4 runes",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if l := utf8.RuneCountInString(val); l < 6 || l > 20 {
				err := MemberValidationError{
					field:  fmt.Sprintf("Phones[%v]", key),
					reason: "value length must be between 6 and 20 runes, inclusive",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if !_Member_Phones_Pattern.MatchString(val) {
				err := MemberValidationError{
					field:  fmt.Sprintf("Phones[%v]", key),
					reason: "value does not match regex pattern \"(?i)^[0-9]+$\"",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	for idx, item := range m.GetAddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  fmt.Sprintf("Addresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberValidationError{
					field:  fmt.Sprintf("Addresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NationalId != nil {
		// no validation rules for NationalId
	}

	if m.CreatedOn != nil {

		if all {
			switch v := interface{}(m.GetCreatedOn()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  "CreatedOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MemberValidationError{
						field:  "CreatedOn",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MemberValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

func (m *Member) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Member) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

func (m *Member) _validateUuid(uuid string) error {
	if matched := _entity_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

var _Member_Phones_Pattern = regexp.MustCompile("(?i)^[0-9]+$")
